# 1. Concatenate the strings 'Thirty', 'Days', 'Of', 'Python'
phrase1 = "Thirty" + " " + "Days" + " " + "Of" + " " + "Python"
print("Concatenated phrase 1:", phrase1)  # Thirty Days Of Python

# 2. Concatenate the strings 'Coding', 'For', 'All'
phrase2 = "Coding" + " " + "For" + " " + "All"
print("Concatenated phrase 2:", phrase2)  # Coding For All

# 3. Declare a variable named company and assign it "Coding For All"
company = "Coding For All"

# 4. Print the variable company
print("Company:", company)

# 5. Print the length of the company string using len() method
print("Length of company string:", len(company))

# 6. Change all the characters to uppercase letters using upper() method
upper_company = company.upper()
print("Uppercase:", upper_company)

# 7. Change all the characters to lowercase letters using lower() method
lower_company = company.lower()
print("Lowercase:", lower_company)

# 8. Format the company string using capitalize(), title(), swapcase()
capitalized = company.capitalize()  # Only the first character will be uppercase, rest lowercase
titled = company.title()           # Each word will start with an uppercase
swapped = company.swapcase()       # Swaps lower to upper and vice versa
print("Capitalized:", capitalized)
print("Title Case:", titled)
print("Swapcase:", swapped)

# 9. Slice out the first word of the "Coding For All" string (i.e. remove 'Coding')
# Using split and join:
sliced = " ".join(company.split()[1:])
print("Without the first word:", sliced)

# 10. Check if "Coding For All" contains a word "Coding" using find/index methods.
# Using find() method:
contains_coding = company.find("Coding")  # returns index if found, else -1
print("Position of 'Coding':", contains_coding)

# 11. Replace the word 'Coding' in the string with 'Python'
replaced_company = company.replace("Coding", "Python")
print("After replacement of 'Coding' with 'Python':", replaced_company)

# 12. Change "Python for Everyone" to "Python for All" using replace method.
phrase = "Python for Everyone"
changed_phrase = phrase.replace("Everyone", "All")
print("Changed phrase:", changed_phrase)

# 13. Split the string 'Coding For All' using space as the separator
split_company = company.split(" ")
print("Split by space:", split_company)

# 14. Split the string at the comma
companies_str = "Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon"
companies_list = companies_str.split(", ")
print("Companies list:", companies_list)

# 15. What is the character at index 0 in the string "Coding For All"
first_char = company[0]
print("Character at index 0:", first_char)

# 16. What is the last index of the string "Coding For All"
last_index = len(company) - 1
print("Last index of the string:", last_index)

# 17. What character is at index 10 in "Coding For All"
char_index_10 = company[10] if len(company) > 10 else "Index out of range"
print("Character at index 10:", char_index_10)

# 18. Create an acronym (abbreviation) for 'Python For Everyone'
acronym_pfe = "".join([word[0].upper() for word in "Python For Everyone".split()])
print("Acronym for 'Python For Everyone':", acronym_pfe)

# 19. Create an acronym (abbreviation) for 'Coding For All'
acronym_cfa = "".join([word[0].upper() for word in company.split()])
print("Acronym for 'Coding For All':", acronym_cfa)

# 20. Use index to determine the position of the first occurrence of 'C' in "Coding For All"
position_C = company.index("C")
print("Position of first occurrence of 'C':", position_C)

# 21. Use index to determine the position of the first occurrence of 'F' in "Coding For All"
position_F = company.index("F")
print("Position of first occurrence of 'F':", position_F)

# 22. Use rfind to determine the position of the last occurrence of 'l' in "Coding For All People"
extended_company = "Coding For All People"
last_occurrence_l = extended_company.rfind("l")
print("Last occurrence of 'l' in 'Coding For All People':", last_occurrence_l)

# 23 & 24. For the sentence with multiple "because" words:
sentence = "You cannot end a sentence with because because because is a conjunction"

# Find the first occurrence of "because"
first_because = sentence.find("because")
print("First occurrence of 'because':", first_because)

# Use rindex to find the last occurrence of "because"
last_because = sentence.rindex("because")
print("Last occurrence of 'because':", last_because)

# 25. Slice out the phrase 'because because because' in the sentence
# Using the first occurrence index and knowing the length of the phrase to extract:
phrase_to_slice = "because because because"
sliced_phrase = sentence[first_because:first_because + len(phrase_to_slice)]
print("Sliced phrase:", sliced_phrase)

# 26. (Repeat of step 23) Find the position of the first occurrence of 'because'
# (Already found above: first_because)

# 27. (Repeat of step 25) Slice out the phrase 'because because because'
# (Already done above: sliced_phrase)

# 28. Check if 'Coding For All' starts with the substring "Coding"
starts_with_coding = company.startswith("Coding")
print("Does 'Coding For All' start with 'Coding'? :", starts_with_coding)

# 29. Check if 'Coding For All' ends with the substring "coding" (case sensitive)
ends_with_coding = company.endswith("coding")
print("Does 'Coding For All' end with 'coding'? :", ends_with_coding)

# 30 Remover los espacios a la izquierda y derecha del string
text = '   Coding For All      '
trimmed_text = text.strip()
print("Texto sin espacios laterales:", repr(trimmed_text))

# 31. Comprobar cuáles variables son identificadores válidos
identifier1 = "30DaysOfPython"
identifier2 = "thirty_days_of_python"
print(f"¿Es '{identifier1}' un identificador válido?", identifier1.isidentifier())
print(f"¿Es '{identifier2}' un identificador válido?", identifier2.isidentifier())

# 32. Unir la lista de librerías con un separador ' # '
libraries = ['Django', 'Flask', 'Bottle', 'Pyramid', 'Falcon']
joined_libraries = " # ".join(libraries)
print("Librerías unidas:", joined_libraries)

# 33. Usar secuencia de escape de nueva línea para separar oraciones
sentence = "I am enjoying this challenge.\nI just wonder what is next."
print("Oraciones separadas por nueva línea:")
print(sentence)

# 34. Usar secuencia de escape de tabulación para escribir líneas
lines = "Name\tAge\tCountry\tCity\nAsabeneh\t250\tFinland\tHelsinki"
print("Líneas con tabulación:")
print(lines)

# 35. Formatear una cadena que muestre el área de un círculo
radius = 10
area = 3.14 * radius ** 2
circle_message = f"The area of a circle with radius {radius} is {area} meters square."
print("Área de un círculo:")
print(circle_message)

# 36. Mostrar operaciones aritméticas con formateo de strings
addition     = f"8 + 6 = {8 + 6}"
subtraction  = f"8 - 6 = {8 - 6}"
multiplication = f"8 * 6 = {8 * 6}"
division     = f"8 / 6 = {8 / 6:.2f}"  # formatea a 2 decimales
modulo       = f"8 % 6 = {8 % 6}"
floor_div    = f"8 // 6 = {8 // 6}"
exponent     = f"8 ** 6 = {8 ** 6}"

print("Operaciones aritméticas:")
print(addition)
print(subtraction)
print(multiplication)
print(division)
print(modulo)
print(floor_div)
print(exponent)
